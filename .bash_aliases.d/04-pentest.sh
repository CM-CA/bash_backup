##########################
#  üõ°Ô∏è Alias y funciones de pentesting/red
##########################
# --- Nmap ---
# nmap_ports, nmap_basic, nmap_paranoid, nmap_advanced, nmap_extract_ports
# --- Pentesting/red ---
# pentest_mkdir, add_host_entry
# --- Fuzzing ---
# ffuf_fuzz
# --- OSINT ---
# crtsh

nmap_ports() {
    if [ -z "$1" ]; then
        echo "Uso: nmap_ports <IP>"
        return 1
    fi
    echo "[*] Escaneando puertos abiertos en $1..."
    nmap -p- --open --min-rate=500 -T4 "$1" -oG "$1-openports.grep" -vvv $2
    echo "[*] Resultado guardado en $1-openports.grep"
    local ports=$(grep -oP '\d+/open' "$1-openports.grep" | cut -d '/' -f 1 | sort -n | uniq | tr '\n' ',' | sed 's/,$//')
    if [ -n "$ports" ]; then
        echo -e "\e[1;32m[+] Puertos abiertos:\e[0m $ports"
    else
        echo -e "\e[1;31m[!] No se encontraron puertos abiertos.\e[0m"
    fi
}

nmap_basic() {
    if [ -z "$1" ]; then
        echo "Uso: nmap_basic <IP>"
        return 1
    fi
    echo "[*] Realizando escaneo b√°sico a $1..."
    local target="$1"
    local ports="${2:-1-1000}"
    nmap -sC -sV -Pn -p "$ports" "$target" -oN "$target-basic.txt" -vvv ${3:-}
    echo "[*] Resultado guardado en $target-basic.txt"
    grep open "$target-basic.txt" | grep -v "Discovered" | awk '{print $1, $3, $4, $5}'
}

nmap_paranoid() {
    if [ -z "$1" ]; then
        echo "Uso: nmap_paranoid <IP>"
        return 1
    fi
    echo "[*] Escaneo en modo paranoico contra $1..."
    local target="$1"
    local ports="${2:-1-1000}"
    sudo nmap -sS -sV -sC -A -T0 -f --data-length 24 --max-retries 1 --version-all -p "$ports" "$target" -oN "$target-paranoid.txt" -vvv ${3:-}
    echo "[*] Resultado guardado en $target-paranoid.txt"
    echo -e "\e[1;33m[!] Escaneo paranoico: muy lento, √∫til para evitar detecci√≥n IDS/IPS.\e[0m"
    grep open "$target-paranoid.txt" | grep -v "Discovered" | awk '{print $1, $3, $4, $5}'
}

nmap_advanced() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo -e "\n\e[1;31m[!] Uso: nmap_advanced <target> <puertos> [opciones]\e[0m"
        echo "Ejemplo: nmap_advanced 10.10.10.10 22,80,443"
        return 1
    fi
    local target="$1"
    local ports="$2"
    local extra_args="${3:-}"
    local output_file="nmap_${target}_$(date +%Y%m%d_%H%M%S).txt"
    echo "[*] Escaneando $target en puertos $ports..."
    sudo nmap -sS -sV -sC -A -T4 -p "$ports" --open -Pn -vvv $extra_args "$target" -oN "$output_file"
    echo "[*] Resultado guardado en $output_file"
    grep open "$output_file" | grep -v "Discovered" | awk '{print $1, $3, $4, $5}'
}

nmap_extract_ports() {
    if [[ -z "$1" ]]; then
        echo "Uso: nmap_extract_ports <archivo>"
        return 1
    fi
    ports=$(grep -oP '\d+/open' "$1" | cut -d '/' -f 1 | sort -n | uniq | tr '\n' ',' | sed 's/,$//')
    ip_addresses=$(grep -oP '\d+\.\d+\.\d+\.\d+' "$1" | sort -u)
    echo -e "\n[*] Extrayendo informaci√≥n...\n" > extractPorts.tmp
    echo -e "\t[*] Direcciones IP detectadas: $ip_addresses" >> extractPorts.tmp
    echo -e "\t[*] Puertos abiertos: $ports\n" >> extractPorts.tmp
    if [ -n "$ports" ]; then
        echo -n "$ports" | xclip -sel clip
        echo -e "[*] Puertos copiados al portapapeles\n" >> extractPorts.tmp
    else
        echo -e "[!] No se encontraron puertos abiertos\n" >> extractPorts.tmp
    fi
    cat extractPorts.tmp
    rm extractPorts.tmp
}

pentest_mkdir() {
    if [[ $# -ne 2 ]]; then
        echo "Uso: pentest_mkdir <HTB|THM> <nombre_maquina>"
        return 1
    fi
    local plataforma=$(echo "$1" | tr '[:lower:]' '[:upper:]')
    local nombre_maquina=$2
    local base_dir=~/Documentos
    case "$plataforma" in
        HTB|THM)
            local ruta="$base_dir/$plataforma/maquinas/$nombre_maquina"
            ;;
        *)
            echo "Plataforma no reconocida. Usa HTB o THM."
            return 1
            ;;
    esac
    echo "[+] Creando estructura para $nombre_maquina en $plataforma..."
    mkdir -p "$ruta"/{scan,content,exploits,apuntes}
    cd "$ruta/scan" || return
    echo "[+] Estructura creada. Ahora est√°s en '$ruta/scan'"
}

add_host_entry() {
    if [ $# -ne 2 ]; then
        echo "Uso: add_host_entry <IP> <dominio>"
        return 1
    fi
    echo "$1 $2" | sudo tee -a /etc/hosts > /dev/null
    echo "A√±adido: $1 $2"
}

ffuf_fuzz() {
  [ -z "$1" ] && echo "Uso: ffuf_fuzz <url> <wordlist>" && return
  ffuf -w "${2:-/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt}" -u "$1/FUZZ" -c -t 100
}

crtsh() {
  [ -z "$1" ] && echo "Uso: crtsh <domain>" && return
  curl -s "https://crt.sh/?q=%25.$1&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u
}
